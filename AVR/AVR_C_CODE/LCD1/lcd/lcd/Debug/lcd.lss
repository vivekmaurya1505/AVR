
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000216  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000216  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c74  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000095a  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bb  00000000  00000000  0000191a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000478  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000348  00000000  00000000  00002200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002548  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	56 c0       	rjmp	.+172    	; 0xb2 <__bad_interrupt>
   6:	00 00       	nop
   8:	54 c0       	rjmp	.+168    	; 0xb2 <__bad_interrupt>
   a:	00 00       	nop
   c:	52 c0       	rjmp	.+164    	; 0xb2 <__bad_interrupt>
   e:	00 00       	nop
  10:	50 c0       	rjmp	.+160    	; 0xb2 <__bad_interrupt>
  12:	00 00       	nop
  14:	4e c0       	rjmp	.+156    	; 0xb2 <__bad_interrupt>
  16:	00 00       	nop
  18:	4c c0       	rjmp	.+152    	; 0xb2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4a c0       	rjmp	.+148    	; 0xb2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	48 c0       	rjmp	.+144    	; 0xb2 <__bad_interrupt>
  22:	00 00       	nop
  24:	46 c0       	rjmp	.+140    	; 0xb2 <__bad_interrupt>
  26:	00 00       	nop
  28:	44 c0       	rjmp	.+136    	; 0xb2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	42 c0       	rjmp	.+132    	; 0xb2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	40 c0       	rjmp	.+128    	; 0xb2 <__bad_interrupt>
  32:	00 00       	nop
  34:	3e c0       	rjmp	.+124    	; 0xb2 <__bad_interrupt>
  36:	00 00       	nop
  38:	3c c0       	rjmp	.+120    	; 0xb2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3a c0       	rjmp	.+116    	; 0xb2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	38 c0       	rjmp	.+112    	; 0xb2 <__bad_interrupt>
  42:	00 00       	nop
  44:	36 c0       	rjmp	.+108    	; 0xb2 <__bad_interrupt>
  46:	00 00       	nop
  48:	34 c0       	rjmp	.+104    	; 0xb2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	32 c0       	rjmp	.+100    	; 0xb2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	30 c0       	rjmp	.+96     	; 0xb2 <__bad_interrupt>
  52:	00 00       	nop
  54:	2e c0       	rjmp	.+92     	; 0xb2 <__bad_interrupt>
  56:	00 00       	nop
  58:	2c c0       	rjmp	.+88     	; 0xb2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2a c0       	rjmp	.+84     	; 0xb2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	28 c0       	rjmp	.+80     	; 0xb2 <__bad_interrupt>
  62:	00 00       	nop
  64:	26 c0       	rjmp	.+76     	; 0xb2 <__bad_interrupt>
  66:	00 00       	nop
  68:	24 c0       	rjmp	.+72     	; 0xb2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	22 c0       	rjmp	.+68     	; 0xb2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	20 c0       	rjmp	.+64     	; 0xb2 <__bad_interrupt>
  72:	00 00       	nop
  74:	1e c0       	rjmp	.+60     	; 0xb2 <__bad_interrupt>
  76:	00 00       	nop
  78:	1c c0       	rjmp	.+56     	; 0xb2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1a c0       	rjmp	.+52     	; 0xb2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	18 c0       	rjmp	.+48     	; 0xb2 <__bad_interrupt>
  82:	00 00       	nop
  84:	16 c0       	rjmp	.+44     	; 0xb2 <__bad_interrupt>
  86:	00 00       	nop
  88:	14 c0       	rjmp	.+40     	; 0xb2 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e1       	ldi	r30, 0x16	; 22
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a6 30       	cpi	r26, 0x06	; 6
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>
  ae:	5a d0       	rcall	.+180    	; 0x164 <main>
  b0:	b0 c0       	rjmp	.+352    	; 0x212 <_exit>

000000b2 <__bad_interrupt>:
  b2:	a6 cf       	rjmp	.-180    	; 0x0 <__vectors>

000000b4 <en>:
	LCD_PORT=((DATA )<<4)|(1<<RS);                //lsb data shifted by 4
	en();                                         // lcd_port data copy to lcd 
}
void en(){
	
	LCD_PORT|=(1<<EN);
  b4:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	8f e5       	ldi	r24, 0x5F	; 95
  b8:	9a ee       	ldi	r25, 0xEA	; 234
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <en+0x6>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <en+0xc>
  c0:	00 00       	nop
	_delay_ms(15);
	LCD_PORT&=~(1<<EN);
  c2:	da 98       	cbi	0x1b, 2	; 27
  c4:	8f e1       	ldi	r24, 0x1F	; 31
  c6:	9e e4       	ldi	r25, 0x4E	; 78
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <en+0x14>
  cc:	00 c0       	rjmp	.+0      	; 0xce <en+0x1a>
  ce:	00 00       	nop
  d0:	08 95       	ret

000000d2 <lcd_cmd>:
    {
		
	 }
}

void lcd_cmd(unsigned int COMMAND){
  d2:	cf 93       	push	r28
  d4:	c8 2f       	mov	r28, r24
	
	LCD_PORT=(COMMAND & 0xf0);                   //msb data copy to lcd_port
  d6:	80 7f       	andi	r24, 0xF0	; 240
  d8:	8b bb       	out	0x1b, r24	; 27
	en();                                        // lcd_port data copy to lcd 
  da:	ec df       	rcall	.-40     	; 0xb4 <en>
	LCD_PORT=((COMMAND & 0x0f)<<4);              //lsb data shifted by 4
  dc:	c2 95       	swap	r28
  de:	c0 7f       	andi	r28, 0xF0	; 240
	en();                                        // lcd_port data copy to lcd 
  e0:	cb bb       	out	0x1b, r28	; 27
  e2:	e8 df       	rcall	.-48     	; 0xb4 <en>
}
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <lcd_data>:
void lcd_data(unsigned char DATA){
  e8:	cf 93       	push	r28
  ea:	c8 2f       	mov	r28, r24
	
	LCD_PORT=(DATA & 0xf0)|(1<<RS);               //msb data copy to lcd_port
  ec:	80 7f       	andi	r24, 0xF0	; 240
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	8b bb       	out	0x1b, r24	; 27
	en();                                         // lcd_port data copy to lcd 
  f2:	e0 df       	rcall	.-64     	; 0xb4 <en>
	LCD_PORT=((DATA )<<4)|(1<<RS);                //lsb data shifted by 4
  f4:	20 e1       	ldi	r18, 0x10	; 16
  f6:	c2 9f       	mul	r28, r18
  f8:	c0 01       	movw	r24, r0
  fa:	11 24       	eor	r1, r1
  fc:	81 60       	ori	r24, 0x01	; 1
	en();                                         // lcd_port data copy to lcd 
  fe:	8b bb       	out	0x1b, r24	; 27
 100:	d9 df       	rcall	.-78     	; 0xb4 <en>
}
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <lcd_init>:
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	89 ef       	ldi	r24, 0xF9	; 249
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <lcd_init+0x6>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_init+0x10>
 116:	00 00       	nop
	LCD_PORT&=~(1<<EN);
	_delay_ms(5);
}
void lcd_init(){
	_delay_ms(20);         //power on delay for lcd
	DDRA=0xf5;             // set port as a lcd outport 11110101
 118:	85 ef       	ldi	r24, 0xF5	; 245
 11a:	8a bb       	out	0x1a, r24	; 26
	lcd_cmd(0x02);         //Return home
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	d8 df       	rcall	.-80     	; 0xd2 <lcd_cmd>
	lcd_cmd(0X28);         //2 lines and 5×7 matrix (4-bit mode)
 122:	88 e2       	ldi	r24, 0x28	; 40
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	d5 df       	rcall	.-86     	; 0xd2 <lcd_cmd>
	lcd_cmd(0X01);         //Clear display screen
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	d2 df       	rcall	.-92     	; 0xd2 <lcd_cmd>
	lcd_cmd(0X0f);
 12e:	8f e0       	ldi	r24, 0x0F	; 15
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	cf df       	rcall	.-98     	; 0xd2 <lcd_cmd>
	lcd_cmd(0X06);         //Increment cursor (shift cursor to right)
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	cc df       	rcall	.-104    	; 0xd2 <lcd_cmd>
	lcd_cmd(0X80);         //Force cursor to beginning to 1st line
 13a:	80 e8       	ldi	r24, 0x80	; 128
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	c9 cf       	rjmp	.-110    	; 0xd2 <lcd_cmd>
 140:	08 95       	ret

00000142 <lcd_string>:
 142:	cf 93       	push	r28
}
void lcd_string(char * str){
 144:	df 93       	push	r29
 146:	ec 01       	movw	r28, r24
	for(unsigned int i=0;str[i]!='\0';i++){
 148:	88 81       	ld	r24, Y
 14a:	88 23       	and	r24, r24
 14c:	29 f0       	breq	.+10     	; 0x158 <lcd_string+0x16>
 14e:	21 96       	adiw	r28, 0x01	; 1
		lcd_data(str[i]);
 150:	cb df       	rcall	.-106    	; 0xe8 <lcd_data>
	lcd_cmd(0X0f);
	lcd_cmd(0X06);         //Increment cursor (shift cursor to right)
	lcd_cmd(0X80);         //Force cursor to beginning to 1st line
}
void lcd_string(char * str){
	for(unsigned int i=0;str[i]!='\0';i++){
 152:	89 91       	ld	r24, Y+
 154:	81 11       	cpse	r24, r1
 156:	fc cf       	rjmp	.-8      	; 0x150 <lcd_string+0xe>
		lcd_data(str[i]);
	}
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <lcd_result>:
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
 15e:	1c d0       	rcall	.+56     	; 0x198 <itoa>
void lcd_result(int result,char *buffer,int base){
	lcd_string(itoa(result, buffer, base));
 160:	f0 cf       	rjmp	.-32     	; 0x142 <lcd_string>
 162:	08 95       	ret

00000164 <main>:
 164:	cf 93       	push	r28
void lcd_string(char *);                //string function for lcd
void lcd_result(int ,char *, int );     //print result value,(result,buffer[size],base)

 
int main(void)
{
 166:	df 93       	push	r29
 168:	00 d0       	rcall	.+0      	; 0x16a <main+0x6>
 16a:	00 d0       	rcall	.+0      	; 0x16c <main+0x8>
 16c:	1f 92       	push	r1
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
		lcd_init();
 172:	c9 df       	rcall	.-110    	; 0x106 <lcd_init>
		lcd_cmd(0x80);
 174:	80 e8       	ldi	r24, 0x80	; 128
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	ac df       	rcall	.-168    	; 0xd2 <lcd_cmd>
		lcd_string("hello");
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	e1 df       	rcall	.-62     	; 0x142 <lcd_string>
		lcd_cmd(0xC0);
 180:	80 ec       	ldi	r24, 0xC0	; 192
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	a6 df       	rcall	.-180    	; 0xd2 <lcd_cmd>
 186:	4a e0       	ldi	r20, 0x0A	; 10
		
		int result1=12;
		char buffer1[5];
		lcd_result(result1,buffer1,10);
 188:	50 e0       	ldi	r21, 0x00	; 0
 18a:	be 01       	movw	r22, r28
 18c:	6f 5f       	subi	r22, 0xFF	; 255
 18e:	7f 4f       	sbci	r23, 0xFF	; 255
 190:	8c e0       	ldi	r24, 0x0C	; 12
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	e4 df       	rcall	.-56     	; 0x15e <lcd_result>
 196:	ff cf       	rjmp	.-2      	; 0x196 <main+0x32>

00000198 <itoa>:
 198:	45 32       	cpi	r20, 0x25	; 37
 19a:	51 05       	cpc	r21, r1
 19c:	18 f4       	brcc	.+6      	; 0x1a4 <itoa+0xc>
 19e:	42 30       	cpi	r20, 0x02	; 2
 1a0:	08 f0       	brcs	.+2      	; 0x1a4 <itoa+0xc>
 1a2:	04 c0       	rjmp	.+8      	; 0x1ac <__itoa_ncheck>
 1a4:	fb 01       	movw	r30, r22
 1a6:	10 82       	st	Z, r1
 1a8:	cb 01       	movw	r24, r22
 1aa:	08 95       	ret

000001ac <__itoa_ncheck>:
 1ac:	bb 27       	eor	r27, r27
 1ae:	4a 30       	cpi	r20, 0x0A	; 10
 1b0:	31 f4       	brne	.+12     	; 0x1be <__itoa_ncheck+0x12>
 1b2:	99 23       	and	r25, r25
 1b4:	22 f4       	brpl	.+8      	; 0x1be <__itoa_ncheck+0x12>
 1b6:	bd e2       	ldi	r27, 0x2D	; 45
 1b8:	90 95       	com	r25
 1ba:	81 95       	neg	r24
 1bc:	9f 4f       	sbci	r25, 0xFF	; 255
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <__utoa_common>

000001c0 <__utoa_ncheck>:
 1c0:	bb 27       	eor	r27, r27

000001c2 <__utoa_common>:
 1c2:	fb 01       	movw	r30, r22
 1c4:	55 27       	eor	r21, r21
 1c6:	aa 27       	eor	r26, r26
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	aa 1f       	adc	r26, r26
 1ce:	a4 17       	cp	r26, r20
 1d0:	10 f0       	brcs	.+4      	; 0x1d6 <__utoa_common+0x14>
 1d2:	a4 1b       	sub	r26, r20
 1d4:	83 95       	inc	r24
 1d6:	50 51       	subi	r21, 0x10	; 16
 1d8:	b9 f7       	brne	.-18     	; 0x1c8 <__utoa_common+0x6>
 1da:	a0 5d       	subi	r26, 0xD0	; 208
 1dc:	aa 33       	cpi	r26, 0x3A	; 58
 1de:	08 f0       	brcs	.+2      	; 0x1e2 <__utoa_common+0x20>
 1e0:	a9 5d       	subi	r26, 0xD9	; 217
 1e2:	a1 93       	st	Z+, r26
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	79 f7       	brne	.-34     	; 0x1c6 <__utoa_common+0x4>
 1e8:	b1 11       	cpse	r27, r1
 1ea:	b1 93       	st	Z+, r27
 1ec:	11 92       	st	Z+, r1
 1ee:	cb 01       	movw	r24, r22
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <strrev>

000001f2 <strrev>:
 1f2:	dc 01       	movw	r26, r24
 1f4:	fc 01       	movw	r30, r24
 1f6:	67 2f       	mov	r22, r23
 1f8:	71 91       	ld	r23, Z+
 1fa:	77 23       	and	r23, r23
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <strrev+0x4>
 1fe:	32 97       	sbiw	r30, 0x02	; 2
 200:	04 c0       	rjmp	.+8      	; 0x20a <strrev+0x18>
 202:	7c 91       	ld	r23, X
 204:	6d 93       	st	X+, r22
 206:	70 83       	st	Z, r23
 208:	62 91       	ld	r22, -Z
 20a:	ae 17       	cp	r26, r30
 20c:	bf 07       	cpc	r27, r31
 20e:	c8 f3       	brcs	.-14     	; 0x202 <strrev+0x10>
 210:	08 95       	ret

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
