
timer_ctc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000088c  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e7  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000280  00000000  00000000  0000125f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000014e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cd  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  000018f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001915  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 6f 00 	call	0xde	; 0xde <main>
  9c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <timer1_init>:
		timer1_delay(10000);
		PORTC=~(PORTC);                               // delay for 10 sec
	}
}
void timer1_init(){
	TCNT1=0;
  a4:	1d bc       	out	0x2d, r1	; 45
  a6:	1c bc       	out	0x2c, r1	; 44
	OCR1A=15999;
  a8:	8f e7       	ldi	r24, 0x7F	; 127
  aa:	9e e3       	ldi	r25, 0x3E	; 62
  ac:	9b bd       	out	0x2b, r25	; 43
  ae:	8a bd       	out	0x2a, r24	; 42
	TCCR1B|=(1<<CS10)|(1<<WGM12);                 //setting CS10 AND WGM12 ANSSIGN TO TCCR1B
  b0:	8e b5       	in	r24, 0x2e	; 46
  b2:	89 60       	ori	r24, 0x09	; 9
  b4:	8e bd       	out	0x2e, r24	; 46
  b6:	08 95       	ret

000000b8 <timer1_delay>:
	
	
}
void timer1_delay(unsigned int time_ms){
	
	for (int i=0;i<time_ms;i++){
  b8:	00 97       	sbiw	r24, 0x00	; 0
  ba:	81 f0       	breq	.+32     	; 0xdc <timer1_delay+0x24>
  bc:	ac 01       	movw	r20, r24
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
		TCNT1=0;
  c2:	1d bc       	out	0x2d, r1	; 45
  c4:	1c bc       	out	0x2c, r1	; 44
		while(!(TIFR&(1<<4)));            //check overflow condition
  c6:	06 b6       	in	r0, 0x36	; 54
  c8:	04 fe       	sbrs	r0, 4
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <timer1_delay+0xe>
		                                  //TCNT1=49536 increase upto 65535 for 1 ms
		TIFR|=(1<<OCF1A);                 //reset tov1 to 0
  cc:	96 b7       	in	r25, 0x36	; 54
  ce:	90 61       	ori	r25, 0x10	; 16
  d0:	96 bf       	out	0x36, r25	; 54
	
	
}
void timer1_delay(unsigned int time_ms){
	
	for (int i=0;i<time_ms;i++){
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
  d6:	24 17       	cp	r18, r20
  d8:	35 07       	cpc	r19, r21
  da:	99 f7       	brne	.-26     	; 0xc2 <timer1_delay+0xa>
  dc:	08 95       	ret

000000de <main>:


int main(void)
{
	
	DDRC=0xff;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	84 bb       	out	0x14, r24	; 20
	   timer1_init();                               //timer1 initialization
  e2:	0e 94 52 00 	call	0xa4	; 0xa4 <timer1_init>
	                                                //set direction port c as a output for led
	while (1){                                        //infinite loop
		timer1_delay(10000);
  e6:	80 e1       	ldi	r24, 0x10	; 16
  e8:	97 e2       	ldi	r25, 0x27	; 39
  ea:	0e 94 5c 00 	call	0xb8	; 0xb8 <timer1_delay>
		PORTC=~(PORTC);                               // delay for 10 sec
  ee:	85 b3       	in	r24, 0x15	; 21
  f0:	80 95       	com	r24
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	f8 cf       	rjmp	.-16     	; 0xe6 <main+0x8>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
