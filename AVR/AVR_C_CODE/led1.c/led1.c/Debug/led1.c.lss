
led1.c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000252  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c8a  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000094b  00000000  00000000  00000fee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000408  00000000  00000000  00001939  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000460  00000000  00000000  00001df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003d7  00000000  00000000  00002254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000262b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  9c:	0c 94 27 01 	jmp	0x24e	; 0x24e <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <en>:
	LCD_PORT=((DATA )<<4)|(1<<RS);                //lsb data shifted by 4
	en();                                         // lcd_port data copy to lcd
}
void en(){
	
	LCD_PORT|=(1<<EN);
  a4:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	8f e5       	ldi	r24, 0x5F	; 95
  a8:	9a ee       	ldi	r25, 0xEA	; 234
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <en+0x6>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <en+0xc>
  b0:	00 00       	nop
	_delay_ms(15);
	LCD_PORT&=~(1<<EN);
  b2:	da 98       	cbi	0x1b, 2	; 27
  b4:	8f e1       	ldi	r24, 0x1F	; 31
  b6:	9e e4       	ldi	r25, 0x4E	; 78
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <en+0x14>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <en+0x1a>
  be:	00 00       	nop
  c0:	08 95       	ret

000000c2 <lcd_cmd>:
void lcd_string(char *);                //string function for lcd
void lcd_result(int ,char *, int );     //print result value,(result,buffer[size],base)



void lcd_cmd(unsigned int COMMAND){
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
	
	LCD_PORT=(COMMAND & 0xf0);                   //msb data copy to lcd_port
  c6:	80 7f       	andi	r24, 0xF0	; 240
  c8:	8b bb       	out	0x1b, r24	; 27
	en();                                        // lcd_port data copy to lcd
  ca:	0e 94 52 00 	call	0xa4	; 0xa4 <en>
	LCD_PORT=((COMMAND & 0x0f)<<4);              //lsb data shifted by 4
  ce:	c2 95       	swap	r28
  d0:	c0 7f       	andi	r28, 0xF0	; 240
  d2:	cb bb       	out	0x1b, r28	; 27
	en();                                        // lcd_port data copy to lcd
  d4:	0e 94 52 00 	call	0xa4	; 0xa4 <en>
}
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <lcd_data>:
void lcd_data(unsigned char DATA){
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
	
	LCD_PORT=(DATA & 0xf0)|(1<<RS);               //msb data copy to lcd_port
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	8b bb       	out	0x1b, r24	; 27
	en();                                         // lcd_port data copy to lcd
  e6:	0e 94 52 00 	call	0xa4	; 0xa4 <en>
	LCD_PORT=((DATA )<<4)|(1<<RS);                //lsb data shifted by 4
  ea:	20 e1       	ldi	r18, 0x10	; 16
  ec:	c2 9f       	mul	r28, r18
  ee:	c0 01       	movw	r24, r0
  f0:	11 24       	eor	r1, r1
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	8b bb       	out	0x1b, r24	; 27
	en();                                         // lcd_port data copy to lcd
  f6:	0e 94 52 00 	call	0xa4	; 0xa4 <en>
}
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <lcd_init>:
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	89 ef       	ldi	r24, 0xF9	; 249
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <lcd_init+0x6>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_init+0x10>
 10e:	00 00       	nop
	LCD_PORT&=~(1<<EN);
	_delay_ms(5);
}
void lcd_init(){
	_delay_ms(20);         //power on delay for lcd
	DDRA=0xf5;             // set port as a lcd outport 11110101
 110:	85 ef       	ldi	r24, 0xF5	; 245
 112:	8a bb       	out	0x1a, r24	; 26
	lcd_cmd(0x02);         //Return home
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_cmd>
	lcd_cmd(0X28);         //2 lines and 5×7 matrix (4-bit mode)
 11c:	88 e2       	ldi	r24, 0x28	; 40
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_cmd>
	lcd_cmd(0X01);         //Clear display screen
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_cmd>
	lcd_cmd(0X0f);
 12c:	8f e0       	ldi	r24, 0x0F	; 15
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_cmd>
	lcd_cmd(0X06);         //Increment cursor (shift cursor to right)
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_cmd>
	lcd_cmd(0X80);         //Force cursor to beginning to 1st line
 13c:	80 e8       	ldi	r24, 0x80	; 128
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_cmd>
 144:	08 95       	ret

00000146 <lcd_string>:
}
void lcd_string(char * str){
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ec 01       	movw	r28, r24
	for(unsigned int i=0;str[i]!='\0';i++){
 14c:	88 81       	ld	r24, Y
 14e:	88 23       	and	r24, r24
 150:	31 f0       	breq	.+12     	; 0x15e <lcd_string+0x18>
 152:	21 96       	adiw	r28, 0x01	; 1
		lcd_data(str[i]);
 154:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_data>
	lcd_cmd(0X0f);
	lcd_cmd(0X06);         //Increment cursor (shift cursor to right)
	lcd_cmd(0X80);         //Force cursor to beginning to 1st line
}
void lcd_string(char * str){
	for(unsigned int i=0;str[i]!='\0';i++){
 158:	89 91       	ld	r24, Y+
 15a:	81 11       	cpse	r24, r1
 15c:	fb cf       	rjmp	.-10     	; 0x154 <lcd_string+0xe>
		lcd_data(str[i]);
	}
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <lcd_result>:
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
 164:	0e 94 e7 00 	call	0x1ce	; 0x1ce <itoa>
void lcd_result(int result,char *buffer,int base){
	lcd_string(itoa(result, buffer, base));
 168:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_string>
 16c:	08 95       	ret

0000016e <main>:
#define F_CPU 16000000
#include <avr/io.h>
#include <util/delay.h>
#include<lcd.h>
int main(void)
{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
 176:	27 97       	sbiw	r28, 0x07	; 7
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	f8 94       	cli
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	0f be       	out	0x3f, r0	; 63
 180:	cd bf       	out	0x3d, r28	; 61
	lcd_init();
 182:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_init>
	DDRC=0XFF;  
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	84 bb       	out	0x14, r24	; 20
	char b[7]; 
	lcd_result(10,b,10);          //set direction PORTA as a output
 18a:	4a e0       	ldi	r20, 0x0A	; 10
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	be 01       	movw	r22, r28
 190:	6f 5f       	subi	r22, 0xFF	; 255
 192:	7f 4f       	sbci	r23, 0xFF	; 255
 194:	8a e0       	ldi	r24, 0x0A	; 10
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_result>
    while (1)               // infinite loop
    {
		
		PORTC=0xaa;        
 19c:	2a ea       	ldi	r18, 0xAA	; 170
	    _delay_ms(500);    // set delay for 0.5 sec
		PORTC=0x50;
 19e:	90 e5       	ldi	r25, 0x50	; 80
	    _delay_ms(500);    // set delay for 0.5 sec
		PORTC=0xff;
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
	char b[7]; 
	lcd_result(10,b,10);          //set direction PORTA as a output
    while (1)               // infinite loop
    {
		
		PORTC=0xaa;        
 1a2:	25 bb       	out	0x15, r18	; 21
 1a4:	3f ef       	ldi	r19, 0xFF	; 255
 1a6:	49 e6       	ldi	r20, 0x69	; 105
 1a8:	58 e1       	ldi	r21, 0x18	; 24
 1aa:	31 50       	subi	r19, 0x01	; 1
 1ac:	40 40       	sbci	r20, 0x00	; 0
 1ae:	50 40       	sbci	r21, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x3c>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x46>
 1b4:	00 00       	nop
	    _delay_ms(500);    // set delay for 0.5 sec
		PORTC=0x50;
 1b6:	95 bb       	out	0x15, r25	; 21
 1b8:	3f ef       	ldi	r19, 0xFF	; 255
 1ba:	49 e6       	ldi	r20, 0x69	; 105
 1bc:	58 e1       	ldi	r21, 0x18	; 24
 1be:	31 50       	subi	r19, 0x01	; 1
 1c0:	40 40       	sbci	r20, 0x00	; 0
 1c2:	50 40       	sbci	r21, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0x50>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x5a>
 1c8:	00 00       	nop
	    _delay_ms(500);    // set delay for 0.5 sec
		PORTC=0xff;
 1ca:	85 bb       	out	0x15, r24	; 21
 1cc:	ea cf       	rjmp	.-44     	; 0x1a2 <main+0x34>

000001ce <itoa>:
 1ce:	45 32       	cpi	r20, 0x25	; 37
 1d0:	51 05       	cpc	r21, r1
 1d2:	20 f4       	brcc	.+8      	; 0x1dc <itoa+0xe>
 1d4:	42 30       	cpi	r20, 0x02	; 2
 1d6:	10 f0       	brcs	.+4      	; 0x1dc <itoa+0xe>
 1d8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__itoa_ncheck>
 1dc:	fb 01       	movw	r30, r22
 1de:	10 82       	st	Z, r1
 1e0:	cb 01       	movw	r24, r22
 1e2:	08 95       	ret

000001e4 <__itoa_ncheck>:
 1e4:	bb 27       	eor	r27, r27
 1e6:	4a 30       	cpi	r20, 0x0A	; 10
 1e8:	31 f4       	brne	.+12     	; 0x1f6 <__itoa_ncheck+0x12>
 1ea:	99 23       	and	r25, r25
 1ec:	22 f4       	brpl	.+8      	; 0x1f6 <__itoa_ncheck+0x12>
 1ee:	bd e2       	ldi	r27, 0x2D	; 45
 1f0:	90 95       	com	r25
 1f2:	81 95       	neg	r24
 1f4:	9f 4f       	sbci	r25, 0xFF	; 255
 1f6:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__utoa_common>

000001fa <__utoa_ncheck>:
 1fa:	bb 27       	eor	r27, r27

000001fc <__utoa_common>:
 1fc:	fb 01       	movw	r30, r22
 1fe:	55 27       	eor	r21, r21
 200:	aa 27       	eor	r26, r26
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	aa 1f       	adc	r26, r26
 208:	a4 17       	cp	r26, r20
 20a:	10 f0       	brcs	.+4      	; 0x210 <__utoa_common+0x14>
 20c:	a4 1b       	sub	r26, r20
 20e:	83 95       	inc	r24
 210:	50 51       	subi	r21, 0x10	; 16
 212:	b9 f7       	brne	.-18     	; 0x202 <__utoa_common+0x6>
 214:	a0 5d       	subi	r26, 0xD0	; 208
 216:	aa 33       	cpi	r26, 0x3A	; 58
 218:	08 f0       	brcs	.+2      	; 0x21c <__utoa_common+0x20>
 21a:	a9 5d       	subi	r26, 0xD9	; 217
 21c:	a1 93       	st	Z+, r26
 21e:	00 97       	sbiw	r24, 0x00	; 0
 220:	79 f7       	brne	.-34     	; 0x200 <__utoa_common+0x4>
 222:	b1 11       	cpse	r27, r1
 224:	b1 93       	st	Z+, r27
 226:	11 92       	st	Z+, r1
 228:	cb 01       	movw	r24, r22
 22a:	0c 94 17 01 	jmp	0x22e	; 0x22e <strrev>

0000022e <strrev>:
 22e:	dc 01       	movw	r26, r24
 230:	fc 01       	movw	r30, r24
 232:	67 2f       	mov	r22, r23
 234:	71 91       	ld	r23, Z+
 236:	77 23       	and	r23, r23
 238:	e1 f7       	brne	.-8      	; 0x232 <strrev+0x4>
 23a:	32 97       	sbiw	r30, 0x02	; 2
 23c:	04 c0       	rjmp	.+8      	; 0x246 <strrev+0x18>
 23e:	7c 91       	ld	r23, X
 240:	6d 93       	st	X+, r22
 242:	70 83       	st	Z, r23
 244:	62 91       	ld	r22, -Z
 246:	ae 17       	cp	r26, r30
 248:	bf 07       	cpc	r27, r31
 24a:	c8 f3       	brcs	.-14     	; 0x23e <strrev+0x10>
 24c:	08 95       	ret

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
