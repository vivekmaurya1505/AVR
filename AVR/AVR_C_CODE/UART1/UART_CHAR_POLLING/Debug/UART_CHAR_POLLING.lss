
UART_CHAR_POLLING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b2  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007de  00000000  00000000  00000ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029c  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000152c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cf  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000053  00000000  00000000  0000194f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000019a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9c:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <uart_init>:
				uart_tx('A');
	}
}

void uart_init(unsigned int ubrr){
	UBRR1H=0;                          //HIGHER BIT 00
  a4:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L=ubrr;                       //to set baud rate
  a8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	UCSR1B|=(1<<TXEN1)|(1<<RXEN1);     // Enabling tx and rx pin
  ac:	ea e9       	ldi	r30, 0x9A	; 154
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	88 61       	ori	r24, 0x18	; 24
  b4:	80 83       	st	Z, r24
	UCSR1C|=(1<<UCSZ11)|(1<<UCSZ10);  // for transmitting 8 bit data
  b6:	ed e9       	ldi	r30, 0x9D	; 157
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	86 60       	ori	r24, 0x06	; 6
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <uart_tx>:
	
}

void uart_tx(unsigned char data){
	while(!((UCSR1A)&(1<<UDRE1)));     //to check if UDR is empty or not if empty then load data to UDR
  c2:	eb e9       	ldi	r30, 0x9B	; 155
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	95 ff       	sbrs	r25, 5
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <uart_tx+0x4>
	UDR1=data;
  cc:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	UCSR1A|=(1<<UDRE1);
  d0:	eb e9       	ldi	r30, 0x9B	; 155
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 62       	ori	r24, 0x20	; 32
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <uart_rx>:
	
}
void uart_rx(){
	while (!((UCSR1A)&(1<<RXC1)));    //to check if reception of data is completed by controller or not.if completed then
  dc:	eb e9       	ldi	r30, 0x9B	; 155
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	88 23       	and	r24, r24
  e4:	ec f7       	brge	.-6      	; 0xe0 <uart_rx+0x4>
	uart_tx(UDR1);                  //to display received data on lcd
  e6:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  ea:	0e 94 61 00 	call	0xc2	; 0xc2 <uart_tx>
  ee:	08 95       	ret

000000f0 <main>:
void uart_init(unsigned int );
void uart_rx();
void uart_tx(unsigned char);
int main(void)
{	
	uart_init(103);
  f0:	87 e6       	ldi	r24, 0x67	; 103
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 52 00 	call	0xa4	; 0xa4 <uart_init>

	while (1)
	{		    uart_rx();
  f8:	0e 94 6e 00 	call	0xdc	; 0xdc <uart_rx>
				uart_tx('A');
  fc:	81 e4       	ldi	r24, 0x41	; 65
  fe:	0e 94 61 00 	call	0xc2	; 0xc2 <uart_tx>
 102:	fa cf       	rjmp	.-12     	; 0xf8 <main+0x8>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
