
UART_INTERRUPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ca6  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000954  00000000  00000000  00000fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000447  00000000  00000000  00001916  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000118  00000000  00000000  00001d60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047b  00000000  00000000  00001e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003f1  00000000  00000000  000022f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000026e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_30>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  9c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <en>:
	for(unsigned int i=0;str[i]!='\0';i++){
		lcd_data(str[i]);
	}
}
void lcd_result(int result,char *buffer,int base){
	lcd_string(itoa(result, buffer, base));
  a4:	da 9a       	sbi	0x1b, 2	; 27
  a6:	8f e5       	ldi	r24, 0x5F	; 95
  a8:	9a ee       	ldi	r25, 0xEA	; 234
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <en+0x6>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <en+0xc>
  b0:	00 00       	nop
  b2:	da 98       	cbi	0x1b, 2	; 27
  b4:	8f e1       	ldi	r24, 0x1F	; 31
  b6:	9e e4       	ldi	r25, 0x4E	; 78
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <en+0x14>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <en+0x1a>
  be:	00 00       	nop
  c0:	08 95       	ret

000000c2 <lcd_cmd>:
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
  c6:	80 7f       	andi	r24, 0xF0	; 240
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	0e 94 52 00 	call	0xa4	; 0xa4 <en>
  ce:	c2 95       	swap	r28
  d0:	c0 7f       	andi	r28, 0xF0	; 240
  d2:	cb bb       	out	0x1b, r28	; 27
  d4:	0e 94 52 00 	call	0xa4	; 0xa4 <en>
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <lcd_data>:
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	8b bb       	out	0x1b, r24	; 27
  e6:	0e 94 52 00 	call	0xa4	; 0xa4 <en>
  ea:	20 e1       	ldi	r18, 0x10	; 16
  ec:	c2 9f       	mul	r28, r18
  ee:	c0 01       	movw	r24, r0
  f0:	11 24       	eor	r1, r1
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	0e 94 52 00 	call	0xa4	; 0xa4 <en>
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <lcd_init>:
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	89 ef       	ldi	r24, 0xF9	; 249
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <lcd_init+0x6>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_init+0x10>
 10e:	00 00       	nop
 110:	85 ef       	ldi	r24, 0xF5	; 245
 112:	8a bb       	out	0x1a, r24	; 26
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_cmd>
 11c:	88 e2       	ldi	r24, 0x28	; 40
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_cmd>
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_cmd>
 12c:	8f e0       	ldi	r24, 0x0F	; 15
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_cmd>
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_cmd>
 13c:	80 e8       	ldi	r24, 0x80	; 128
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_cmd>
 144:	08 95       	ret

00000146 <uart_init>:
    }
}

void uart_init(unsigned int ubrr){

	UCSR1B|=(1<<RXCIE1);
 146:	ea e9       	ldi	r30, 0x9A	; 154
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	90 81       	ld	r25, Z
 14c:	90 68       	ori	r25, 0x80	; 128
 14e:	90 83       	st	Z, r25
	UBRR1H=0;                          //HIGHER BIT 00
 150:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L=ubrr;                       //to set baud rate
 154:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	UCSR1B|=(1<<TXEN1)|(1<<RXEN1);     // Enabling tx and rx pin
 158:	80 81       	ld	r24, Z
 15a:	88 61       	ori	r24, 0x18	; 24
 15c:	80 83       	st	Z, r24
	UCSR1C|=(1<<UCSZ11)|(1<<UCSZ10);  
 15e:	ed e9       	ldi	r30, 0x9D	; 157
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	86 60       	ori	r24, 0x06	; 6
 166:	80 83       	st	Z, r24
		// for transmitting 8 bit data
	sei();
 168:	78 94       	sei
 16a:	08 95       	ret

0000016c <uart_tx>:
}

void uart_tx(unsigned char data){
while(!((UCSR1A)&(1<<UDRE1)));     //to check if UDR is empty or not if empty then load data to UDR
 16c:	eb e9       	ldi	r30, 0x9B	; 155
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	90 81       	ld	r25, Z
 172:	95 ff       	sbrs	r25, 5
 174:	fd cf       	rjmp	.-6      	; 0x170 <uart_tx+0x4>
UDR1=data;                           
 176:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 17a:	08 95       	ret

0000017c <main>:
void uart_init(unsigned int );
void uart_rx();
void uart_tx(unsigned char);
int main(void)
{
	lcd_init();
 17c:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_init>
	
	uart_init(my_ubrr);
 180:	87 e6       	ldi	r24, 0x67	; 103
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 a3 00 	call	0x146	; 0x146 <uart_init>
  
    while (1) 
    {
		uart_tx('m');
 188:	8d e6       	ldi	r24, 0x6D	; 109
 18a:	0e 94 b6 00 	call	0x16c	; 0x16c <uart_tx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	83 ed       	ldi	r24, 0xD3	; 211
 192:	90 e3       	ldi	r25, 0x30	; 48
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x18>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x22>
 19e:	00 00       	nop
 1a0:	f3 cf       	rjmp	.-26     	; 0x188 <main+0xc>

000001a2 <__vector_30>:
// 	{                                //come out of the loop
// 	}
// 	lcd_data(UDR1);                  //to display received data on lcd
// 	
// }
ISR(USART1_RX_vect){
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	4f 93       	push	r20
 1b2:	5f 93       	push	r21
 1b4:	6f 93       	push	r22
 1b6:	7f 93       	push	r23
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
	
	lcd_data(UDR1);  
 1c4:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 1c8:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_data>
	
}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	bf 91       	pop	r27
 1d2:	af 91       	pop	r26
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	7f 91       	pop	r23
 1da:	6f 91       	pop	r22
 1dc:	5f 91       	pop	r21
 1de:	4f 91       	pop	r20
 1e0:	3f 91       	pop	r19
 1e2:	2f 91       	pop	r18
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
