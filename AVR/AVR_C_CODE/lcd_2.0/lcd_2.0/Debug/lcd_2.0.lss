
lcd_2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000196  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ab4  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000887  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000384  00000000  00000000  000015d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001958  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000401  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  00001dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001f35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  9c:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <en>:
	
	en();
}
void en(){
		//PORTC=0xFD;
	LCD_PORT|=(1<<EN);
  a4:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	8f e5       	ldi	r24, 0x5F	; 95
  a8:	9a ee       	ldi	r25, 0xEA	; 234
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <en+0x6>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <en+0xc>
  b0:	00 00       	nop
	_delay_ms(15);
	LCD_PORT&=~(1<<EN);
  b2:	da 98       	cbi	0x1b, 2	; 27
  b4:	8f e1       	ldi	r24, 0x1F	; 31
  b6:	9e e4       	ldi	r25, 0x4E	; 78
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <en+0x14>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <en+0x1a>
  be:	00 00       	nop
  c0:	08 95       	ret

000000c2 <cmd>:
		lcd_data('e');
	}
}


void cmd(unsigned int COMMAND){
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
		//PORTC=0xFE;
	
	LCD_PORT=(LCD_PORT & 0x0f)|(COMMAND & 0xf0);
  c6:	8b b3       	in	r24, 0x1b	; 27
  c8:	8f 70       	andi	r24, 0x0F	; 15
  ca:	9c 2f       	mov	r25, r28
  cc:	90 7f       	andi	r25, 0xF0	; 240
  ce:	89 2b       	or	r24, r25
  d0:	8b bb       	out	0x1b, r24	; 27
	LCD_PORT&=~(1<<RS);
  d2:	d8 98       	cbi	0x1b, 0	; 27
	
	en();
  d4:	0e 94 52 00 	call	0xa4	; 0xa4 <en>
	
	LCD_PORT=((LCD_PORT & 0x0f)|((COMMAND)<<4));
  d8:	8b b3       	in	r24, 0x1b	; 27
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	c2 95       	swap	r28
  de:	c0 7f       	andi	r28, 0xF0	; 240
  e0:	c8 2b       	or	r28, r24
  e2:	cb bb       	out	0x1b, r28	; 27
	LCD_PORT&=~(1<<RS);
  e4:	d8 98       	cbi	0x1b, 0	; 27
		//PORTC=0xFC;
	en();
  e6:	0e 94 52 00 	call	0xa4	; 0xa4 <en>
}
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <lcd_data>:
void lcd_data(unsigned int DATA){
  ee:	cf 93       	push	r28
  f0:	c8 2f       	mov	r28, r24
	
	//PORTC=0xFB;
	LCD_PORT=(LCD_PORT & 0x0f)|(DATA & 0xf0);
  f2:	8b b3       	in	r24, 0x1b	; 27
  f4:	8f 70       	andi	r24, 0x0F	; 15
  f6:	9c 2f       	mov	r25, r28
  f8:	90 7f       	andi	r25, 0xF0	; 240
  fa:	89 2b       	or	r24, r25
  fc:	8b bb       	out	0x1b, r24	; 27
	LCD_PORT|=(1<<RS);
  fe:	d8 9a       	sbi	0x1b, 0	; 27
	//PORTC=0xFA;
	en();
 100:	0e 94 52 00 	call	0xa4	; 0xa4 <en>
	LCD_PORT=((LCD_PORT & 0x0f)|((DATA )<<4));
 104:	8b b3       	in	r24, 0x1b	; 27
 106:	8f 70       	andi	r24, 0x0F	; 15
 108:	c2 95       	swap	r28
 10a:	c0 7f       	andi	r28, 0xF0	; 240
 10c:	c8 2b       	or	r28, r24
 10e:	cb bb       	out	0x1b, r28	; 27
	LCD_PORT|=(1<<RS);
 110:	d8 9a       	sbi	0x1b, 0	; 27
	
	en();
 112:	0e 94 52 00 	call	0xa4	; 0xa4 <en>
}
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <lcd_init>:
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	89 ef       	ldi	r24, 0xF9	; 249
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <lcd_init+0x6>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_init+0x10>
 12a:	00 00       	nop
	_delay_ms(5);
}
void lcd_init(){
	_delay_ms(20);
	
	cmd(0X02);
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 61 00 	call	0xc2	; 0xc2 <cmd>
	cmd(0X28);
 134:	88 e2       	ldi	r24, 0x28	; 40
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 61 00 	call	0xc2	; 0xc2 <cmd>
	cmd(0X33);
 13c:	83 e3       	ldi	r24, 0x33	; 51
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 61 00 	call	0xc2	; 0xc2 <cmd>
	cmd(0X32);
 144:	82 e3       	ldi	r24, 0x32	; 50
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 61 00 	call	0xc2	; 0xc2 <cmd>
	cmd(0X0e);
 14c:	8e e0       	ldi	r24, 0x0E	; 14
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 61 00 	call	0xc2	; 0xc2 <cmd>
	cmd(0X0c);
 154:	8c e0       	ldi	r24, 0x0C	; 12
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 61 00 	call	0xc2	; 0xc2 <cmd>
	
	cmd(0X01);
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 61 00 	call	0xc2	; 0xc2 <cmd>
	cmd(0X0f);
 164:	8f e0       	ldi	r24, 0x0F	; 15
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 61 00 	call	0xc2	; 0xc2 <cmd>
	cmd(0X06);
 16c:	86 e0       	ldi	r24, 0x06	; 6
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 61 00 	call	0xc2	; 0xc2 <cmd>
	cmd(0X80);
 174:	80 e8       	ldi	r24, 0x80	; 128
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 61 00 	call	0xc2	; 0xc2 <cmd>
 17c:	08 95       	ret

0000017e <main>:
void lcd_init();
void en();

int main(void)
{
	DDRA=0xff;
 17e:	cf ef       	ldi	r28, 0xFF	; 255
 180:	ca bb       	out	0x1a, r28	; 26
	lcd_init();
 182:	0e 94 8d 00 	call	0x11a	; 0x11a <lcd_init>
	
	DDRC=0xff;
 186:	c4 bb       	out	0x14, r28	; 20
	while (1)
	{
		
		//	_delay_ms(1000);
	
		lcd_data('e');
 188:	85 e6       	ldi	r24, 0x65	; 101
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 77 00 	call	0xee	; 0xee <lcd_data>
 190:	fb cf       	rjmp	.-10     	; 0x188 <main+0xa>

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
