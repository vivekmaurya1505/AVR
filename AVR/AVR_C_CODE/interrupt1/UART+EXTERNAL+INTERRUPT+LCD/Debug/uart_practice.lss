
uart_practice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  000002ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bb0  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f6  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047c  00000000  00000000  00001832  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046f  00000000  00000000  00001de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000361  00000000  00000000  00002253  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000025b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_8>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 30       	cpi	r26, 0x0A	; 10
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <uart_init>:
}
void uart_tx(char data){
	
	while(!((UCSR1A)&(1<<UDRE1)));
	
	UDR1=data;
  b4:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  b8:	87 e6       	ldi	r24, 0x67	; 103
  ba:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  be:	ea e9       	ldi	r30, 0x9A	; 154
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 61       	ori	r24, 0x18	; 24
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <uart_str>:
	
}
void uart_str(char str[]){
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	dc 01       	movw	r26, r24
  d0:	9c 01       	movw	r18, r24
  d2:	26 5f       	subi	r18, 0xF6	; 246
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for(int i=0;i<size;i++){
	while (!((UCSR1A) &(1<<RXC1)));
  d6:	eb e9       	ldi	r30, 0x9B	; 155
  d8:	f0 e0       	ldi	r31, 0x00	; 0
		
		str[i]=UDR1;
  da:	cc e9       	ldi	r28, 0x9C	; 156
  dc:	d0 e0       	ldi	r29, 0x00	; 0
	
}
void uart_str(char str[]){
	
	for(int i=0;i<size;i++){
	while (!((UCSR1A) &(1<<RXC1)));
  de:	90 81       	ld	r25, Z
  e0:	99 23       	and	r25, r25
  e2:	ec f7       	brge	.-6      	; 0xde <uart_str+0x14>
		
		str[i]=UDR1;
  e4:	88 81       	ld	r24, Y
  e6:	8d 93       	st	X+, r24
		PORTC=~PORTC;
  e8:	95 b3       	in	r25, 0x15	; 21
  ea:	90 95       	com	r25
  ec:	95 bb       	out	0x15, r25	; 21
	UDR1=data;
	
}
void uart_str(char str[]){
	
	for(int i=0;i<size;i++){
  ee:	a2 17       	cp	r26, r18
  f0:	b3 07       	cpc	r27, r19
  f2:	a9 f7       	brne	.-22     	; 0xde <uart_str+0x14>
	while (!((UCSR1A) &(1<<RXC1)));
		
		str[i]=UDR1;
		PORTC=~PORTC;
	}
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <ext_init>:

void ext_init(){ 
	
	DDRE=0X00;
  fa:	12 b8       	out	0x02, r1	; 2
	PORTE=0XFF;
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	83 b9       	out	0x03, r24	; 3
	EIMSK=0XC0;
 100:	80 ec       	ldi	r24, 0xC0	; 192
 102:	89 bf       	out	0x39, r24	; 57
	sei();
 104:	78 94       	sei
 106:	08 95       	ret

00000108 <en>:
	LCD_PORT=((DATA )<<4)|(1<<RS);                //lsb data shifted by 4
	en();                                         // lcd_port data copy to lcd
}
void en(){
	
	LCD_PORT|=(1<<EN);
 108:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	8f e5       	ldi	r24, 0x5F	; 95
 10c:	9a ee       	ldi	r25, 0xEA	; 234
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <en+0x6>
 112:	00 c0       	rjmp	.+0      	; 0x114 <en+0xc>
 114:	00 00       	nop
	_delay_ms(15);
	LCD_PORT&=~(1<<EN);
 116:	da 98       	cbi	0x1b, 2	; 27
 118:	8f e1       	ldi	r24, 0x1F	; 31
 11a:	9e e4       	ldi	r25, 0x4E	; 78
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <en+0x14>
 120:	00 c0       	rjmp	.+0      	; 0x122 <en+0x1a>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <lcd_cmd>:
	lcd_string(str);
	sei();
}

//====================================================================================================
void lcd_cmd(unsigned int COMMAND){
 126:	cf 93       	push	r28
 128:	c8 2f       	mov	r28, r24
	
	LCD_PORT=(COMMAND & 0xf0);                   //msb data copy to lcd_port
 12a:	80 7f       	andi	r24, 0xF0	; 240
 12c:	8b bb       	out	0x1b, r24	; 27
	en();                                        // lcd_port data copy to lcd
 12e:	0e 94 84 00 	call	0x108	; 0x108 <en>
	LCD_PORT=((COMMAND & 0x0f)<<4);              //lsb data shifted by 4
 132:	c2 95       	swap	r28
 134:	c0 7f       	andi	r28, 0xF0	; 240
 136:	cb bb       	out	0x1b, r28	; 27
	en();                                        // lcd_port data copy to lcd
 138:	0e 94 84 00 	call	0x108	; 0x108 <en>
}
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <lcd_data>:
void lcd_data(unsigned char DATA){
 140:	cf 93       	push	r28
 142:	c8 2f       	mov	r28, r24
	
	LCD_PORT=(DATA & 0xf0)|(1<<RS);               //msb data copy to lcd_port
 144:	80 7f       	andi	r24, 0xF0	; 240
 146:	81 60       	ori	r24, 0x01	; 1
 148:	8b bb       	out	0x1b, r24	; 27
	en();                                         // lcd_port data copy to lcd
 14a:	0e 94 84 00 	call	0x108	; 0x108 <en>
	LCD_PORT=((DATA )<<4)|(1<<RS);                //lsb data shifted by 4
 14e:	20 e1       	ldi	r18, 0x10	; 16
 150:	c2 9f       	mul	r28, r18
 152:	c0 01       	movw	r24, r0
 154:	11 24       	eor	r1, r1
 156:	81 60       	ori	r24, 0x01	; 1
 158:	8b bb       	out	0x1b, r24	; 27
	en();                                         // lcd_port data copy to lcd
 15a:	0e 94 84 00 	call	0x108	; 0x108 <en>
}
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <lcd_init>:
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	89 ef       	ldi	r24, 0xF9	; 249
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <lcd_init+0x6>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_init+0x10>
 172:	00 00       	nop
	LCD_PORT&=~(1<<EN);
	_delay_ms(5);
}
void lcd_init(){
	_delay_ms(20);         //power on delay for lcd
	DDRA=0xf5;             // set port as a lcd outport 11110101
 174:	85 ef       	ldi	r24, 0xF5	; 245
 176:	8a bb       	out	0x1a, r24	; 26
	lcd_cmd(0x02);         //Return home
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 93 00 	call	0x126	; 0x126 <lcd_cmd>
	lcd_cmd(0X28);         //2 lines and 5×7 matrix (4-bit mode)
 180:	88 e2       	ldi	r24, 0x28	; 40
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 93 00 	call	0x126	; 0x126 <lcd_cmd>
	lcd_cmd(0X01);         //Clear display screen
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 93 00 	call	0x126	; 0x126 <lcd_cmd>
	lcd_cmd(0X0f);
 190:	8f e0       	ldi	r24, 0x0F	; 15
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 93 00 	call	0x126	; 0x126 <lcd_cmd>
	lcd_cmd(0X06);         //Increment cursor (shift cursor to right)
 198:	86 e0       	ldi	r24, 0x06	; 6
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 93 00 	call	0x126	; 0x126 <lcd_cmd>
	lcd_cmd(0X80);         //Force cursor to beginning to 1st line
 1a0:	80 e8       	ldi	r24, 0x80	; 128
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 93 00 	call	0x126	; 0x126 <lcd_cmd>
 1a8:	08 95       	ret

000001aa <main>:

//==============================================
int main(){
	
	
	DDRC=0xff;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	84 bb       	out	0x14, r24	; 20
	lcd_init();
 1ae:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_init>
	uart_init();
 1b2:	0e 94 5a 00 	call	0xb4	; 0xb4 <uart_init>
	ext_init();
 1b6:	0e 94 7d 00 	call	0xfa	; 0xfa <ext_init>
	uart_str(str);
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	0e 94 65 00 	call	0xca	; 0xca <uart_str>
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <main+0x18>

000001c4 <lcd_string>:
	lcd_cmd(0X01);         //Clear display screen
	lcd_cmd(0X0f);
	lcd_cmd(0X06);         //Increment cursor (shift cursor to right)
	lcd_cmd(0X80);         //Force cursor to beginning to 1st line
}
void lcd_string(char * str){
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	ec 01       	movw	r28, r24
	for(unsigned int i=0;str[i]!='\0';i++){
 1ca:	88 81       	ld	r24, Y
 1cc:	88 23       	and	r24, r24
 1ce:	31 f0       	breq	.+12     	; 0x1dc <lcd_string+0x18>
 1d0:	21 96       	adiw	r28, 0x01	; 1
		lcd_data(str[i]);
 1d2:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_data>
	lcd_cmd(0X0f);
	lcd_cmd(0X06);         //Increment cursor (shift cursor to right)
	lcd_cmd(0X80);         //Force cursor to beginning to 1st line
}
void lcd_string(char * str){
	for(unsigned int i=0;str[i]!='\0';i++){
 1d6:	89 91       	ld	r24, Y+
 1d8:	81 11       	cpse	r24, r1
 1da:	fb cf       	rjmp	.-10     	; 0x1d2 <lcd_string+0xe>
		lcd_data(str[i]);
	}
}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <__vector_8>:
	DDRE=0X00;
	PORTE=0XFF;
	EIMSK=0XC0;
	sei();
}
ISR(INT7_vect){
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	4f 93       	push	r20
 1f2:	5f 93       	push	r21
 1f4:	6f 93       	push	r22
 1f6:	7f 93       	push	r23
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	af 93       	push	r26
 1fe:	bf 93       	push	r27
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
	cli();
 204:	f8 94       	cli
	PORTC=0xf0;
 206:	80 ef       	ldi	r24, 0xF0	; 240
 208:	85 bb       	out	0x15, r24	; 21
	lcd_string(str);
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_string>
	sei();
 212:	78 94       	sei
}
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	bf 91       	pop	r27
 21a:	af 91       	pop	r26
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	7f 91       	pop	r23
 222:	6f 91       	pop	r22
 224:	5f 91       	pop	r21
 226:	4f 91       	pop	r20
 228:	3f 91       	pop	r19
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
